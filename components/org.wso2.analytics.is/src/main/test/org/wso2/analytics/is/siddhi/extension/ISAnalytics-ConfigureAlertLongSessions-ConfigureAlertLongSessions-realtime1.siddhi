@App:name("ISAnalytics-ConfigureAlertLongSessions-ConfigureAlertLongSessions-realtime1")
@App:description("Description of the plan")

@source(type = "wso2event", wso2.stream.id = "org.wso2.is.analytics.stream.OverallSession:1.0.0", @map(type = 'wso2event'))


define stream SessionStream (meta_tenantId int, sessionId string, startTimestamp long, renewTimestamp long, terminationTimestamp long, action int, username string, userstoreDomain string, remoteIp string, region string, tenantDomain string, serviceProvider string, identityProviders string, rememberMeFlag bool, userAgent string, _timestamp long);
define stream periodicalTriggerStream (triggered_time long);

@source(type = "wso2event", wso2.stream.id = "org.wso2.is.analytics.stream.OverallAuthentication:1.0.0", @map(type = 'wso2event'))

define stream InStream (meta_tenantId int, contextId string, eventId string, eventType string, authenticationSuccess bool, username string, localUsername string, userStoreDomain string, tenantDomain string, remoteIp string, region string, inboundAuthType string, serviceProvider string, rememberMeEnabled bool, forceAuthEnabled bool, passiveAuthEnabled bool, rolesCommaSeparated string, authenticationStep string, identityProvider string, authStepSuccess bool, stepAuthenticator string, isFirstLogin bool, identityProviderType string, _timestamp long);
define trigger periodicalTriggerStream at every 2 min;

@sink(type='log', prefix='Session Stream Info Summary')

define stream SessionStreamInfoSummary (triggered_time long, meta_tenantId int, sessionId string, startTimestamp long, renewTimestamp long, terminationTimestamp long, endTimestamp long, year int, month int, day int, hour int, minute int, duration long, isActive bool, username string, userstoreDomain string, remoteIp string, region string, tenantDomain string, serviceProvider string, identityProviders string, rememberMeFlag bool, userAgent string, usernameWithTenantDomainAndUserstoreDomain string);

@sink(type='log', prefix='Filter long session')

define stream FilterLongSessions (meta_tenantId int, sessionId string, startTimestamp long, renewTimestamp long, terminationTimestamp long, endTimestamp long, duration long, username string, userstoreDomain string, tenantDomain string);

@sink(type='log', prefix='Alert Long Sessions Temp')
define stream AlertLongSessionsTemp (meta_tenantId int, tenantDomain string, sessionId string, username string, duration long, avgDuration double);

@sink(type='log', prefix='Alert Long Sessions')
define stream AlertLongSessions (meta_tenantId int, tenantDomain string, sessionId string, username string, duration long, avgDuration double);

@sink(type='log', prefix='alert_all ISAlerts Stream')
define stream alert_allISAlertsStream (meta_tenantId int, type string, tenantDomain string, msg string, severity int, alertTimestamp long, userReadableTime string);

@primaryKey('meta_tenantId', 'sessionId') 
@store(type='rdbms', jdbc.url="jdbc:mysql://localhost:3306/longSessionDB?useSSL=false", username="root", password="Analytics" , jdbc.driver.name="com.mysql.jdbc.Driver")
define table SessionStreamInfoTable(meta_tenantId int, sessionId string, startTimestamp long, renewTimestamp long, terminationTimestamp long, endTimestamp long, year int, month int, day int, hour int, minute int, duration long, isActive bool, username string, userstoreDomain string, remoteIp string, region string, tenantDomain string, serviceProvider string, identityProviders string, rememberMeFlag bool, userAgent string, usernameWithTenantDomainAndUserstoreDomain string);

@primaryKey('meta_tenantId', 'tenantDomain', 'username', 'userstoreDomain') 
@store(type='rdbms', jdbc.url="jdbc:mysql://localhost:3306/longSessionDB?useSSL=false", username="root", password="Analytics" , jdbc.driver.name="com.mysql.jdbc.Driver")
define table AverageSessionDurationTable(meta_tenantId int, tenantDomain string, username string, userstoreDomain string, avgDuration double);


from SessionStream
select meta_tenantId, sessionId, startTimestamp, renewTimestamp, terminationTimestamp, convert(-1, 'long') as endTimestamp, time:extract(startTimestamp, 'year') as year, time:extract(startTimestamp, 'month') as month, time:extract(startTimestamp, 'day') as day, time:extract(startTimestamp, 'hour') as hour, time:extract(startTimestamp, 'minute') as minute, (_timestamp - startTimestamp) as duration, true as isActive, username, userstoreDomain, remoteIp, region, tenantDomain, serviceProvider, identityProviders, rememberMeFlag, userAgent, ifThenElse(userstoreDomain is null OR userstoreDomain == "" OR userstoreDomain == "NOT_AVAILABLE" OR tenantDomain is null OR tenantDomain == "" OR tenantDomain == "NOT_AVAILABLE", username, str:concat(userstoreDomain, '/', username, '@', tenantDomain)) as usernameWithTenantDomainAndUserstoreDomain
update or insert  into SessionStreamInfoTable
on SessionStreamInfoTable.meta_tenantId==meta_tenantId AND SessionStreamInfoTable.sessionId==sessionId;

from periodicalTriggerStream join SessionStreamInfoTable
select *
insert into SessionStreamInfoSummary;

@info(name = 'FilterLongSessions')
from SessionStreamInfoSummary [duration > 900000 and rememberMeFlag == false and isActive == true]
select meta_tenantId, sessionId, startTimestamp, renewTimestamp, terminationTimestamp, endTimestamp, duration, username, userstoreDomain, tenantDomain
insert into FilterLongSessions;

from SessionStream
select meta_tenantId, tenantDomain, username, userstoreDomain, avg(_timestamp - startTimestamp) as avgDuration
update or insert into AverageSessionDurationTable
on AverageSessionDurationTable.meta_tenantId==meta_tenantId AND AverageSessionDurationTable.tenantDomain==tenantDomain AND AverageSessionDurationTable.username==username AND AverageSessionDurationTable.userstoreDomain==userstoreDomain;
@info(name = 'getDataFromAverageSessionDurationTable')
from FilterLongSessions as s join AverageSessionDurationTable as t
on (s.meta_tenantId == t.meta_tenantId and s.tenantDomain == t.tenantDomain and s.username == t.username and s.userstoreDomain == t.userstoreDomain)
select s.meta_tenantId, s.tenantDomain, s.sessionId, s.username, s.duration, t.avgDuration
insert into AlertLongSessionsTemp;

@info(name = 'DetectAbnormalLongSessions')
from AlertLongSessionsTemp[duration > (avgDuration * (50.0 + 100.0) / 100.0)]
select meta_tenantId, tenantDomain, sessionId, username, duration, avgDuration
insert into AlertLongSessions;


@info(name = 'SendingAlertsToAllISAlertsStream')
from AlertLongSessions
select meta_tenantId, "AbnormalLongSessionAlert" as type, tenantDomain, str:concat('Abnormal long session session of ', duration, ' milliseconds detected by user: ', username,' on session id: ', sessionId, '.') as msg, 3 as severity, (time:timestampInMilliseconds()) as alertTimestamp, time:dateFormat((time:timestampInMilliseconds()),'yyyy-MM-dd HH:mm:ss') as userReadableTime
insert into alert_allISAlertsStream;




