<%
(function () {


    var log = new Log();
    var carbon = require('carbon');
    var configs = require('/configs/designer.json');
    var utils = require('/modules/utils.js');
    var timeRangeUtil = Packages.org.wso2.carbon.analytics.esb.util.TimeRangeUtils;
    var timeRange = Packages.org.wso2.carbon.analytics.esb.bean.TimeRange;
    var JSUtils = Packages.org.wso2.carbon.analytics.jsservice.Utils;
    var AnalyticsCachedJSServiceConnector = Packages.org.wso2.carbon.analytics.jsservice.AnalyticsCachedJSServiceConnector;
    var AnalyticsCache = Packages.org.wso2.carbon.analytics.jsservice.AnalyticsCachedJSServiceConnector.AnalyticsCache;

    var CONTENT_TYPE_JSON = "application/json";
    var AUTHORIZATION_HEADER = "Authorization";
    var USER_TOKEN = "user";
    var TYPE = "type";
    var USERNAME = "username";
    var HTTP_INTERNAL_ERROR = 500;
    var HTTP_USER_NOT_AUTHENTICATED = 403;

    //operation types
    var TYPE_OVERALL_AUTH_SUCCESS_AND_FAILURE = 1;
    var TYPE_PER_USER_AUTH_SUCCESS = 2;
    var TYPE_PER_USER_AUTH_FAILURE = 3;
    var TYPE_PER_SERVICE_PROVIDER_AUTH_SUCCESS = 4;
    var TYPE_PER_SERVICE_PROVIDER_AUTH_FAILURE = 5;
    var TYPE_PER_ROLE_AUTH_SUCCESS = 6;
    var TYPE_PER_ROLE_AUTH_FAILURE = 7;
    var TYPE_OVERALL_AUTH_STATS = 8;
    var TYPE_PER_IDENTITY_PROVIDER_AUTH_SUCCESS = 9;
    var TYPE_PER_IDENTITY_PROVIDER_AUTH_FAILURE = 10;
    var TYPE_AUTHENTICATION_DATA_TABLE = 11;
    var TYPE_USERNAME_LIST = 12;
    var TYPE_SERVICE_PROVIDER_LIST = 13;
    var TYPE_IDENTITY_PROVIDER_LIST = 14;
    var TYPE_ROLE_LIST = 15;
    var TYPE_PER_SERVICE_PROVIDER_FIRST_LOGIN_SUCCESS = 16;
    var TYPE_USERSTORE_LIST = 17;
    var TYPE_PER_USERSTORE_AUTH_SUCCESS = 18;
    var TYPE_PER_USERSTORE_AUTH_FAILURE = 19;
    var TYPE_AUTHENTICATION_DATA_TABLE_RESIDENT_IDP = 20;

    if (configs.cacheTimeoutSeconds) {
        cacheTimeoutSeconds = parseInt(configs.cacheTimeoutSeconds);
    }
    var cacheSizeBytes = 1024 * 1024 * 1024; // 1GB
    if (configs.cacheSizeBytes) {
        cacheSizeBytes = parseInt(configs.cacheSizeBytes);
    }

    response.contentType = CONTENT_TYPE_JSON;

    var authParam = request.getHeader(AUTHORIZATION_HEADER);
    if (authParam != null) {
        credentials = JSUtils.authenticate(authParam);
        loggedInUser = credentials[0];
    } else {
        var token = session.get(USER_TOKEN);
        if (token != null) {
            loggedInUser = token[USERNAME];
        } else {
            log.error("user is not authenticated!");
            response.status = HTTP_USER_NOT_AUTHENTICATED;
            print('{ "status": "Failed", "message": "User is not authenticated." }');
            return;
        }
    }

    var cache = application.get("AnalyticsWebServiceCache");
    if (cache == null) {
        cache = new AnalyticsCache(cacheTimeoutSeconds, cacheSizeBytes);
        application.put("AnalyticsWebServiceCache", cache);
    }

    var connector = new AnalyticsCachedJSServiceConnector(cache);

    var type = 0;
    var typeParam = request.getParameter(TYPE);
    if (typeParam != null) {
        type = parseInt(typeParam);
    }

    if (type == 0) {
        log.error("operation type is not specified!");
        response.status = HTTP_INTERNAL_ERROR;
        print('{ "status": "Failed", "message": "Operation type is not specified" }');
        return;
    }

    var content = request.getContent();
    if (content != '' && content != null) {
        if (log.isDebugEnabled()) {
            log.debug("value of content: " + stringify(content));
        }
    }

    if (connector != null && loggedInUser != null) {

        var result = null;
        var query = null;
        var resp = null;

        switch (type) {
            case TYPE_OVERALL_AUTH_SUCCESS_AND_FAILURE:
            {
                result = [];
                var timeFrom = request.getParameter("timeFrom");
                var timeTo = request.getParameter("timeTo");
                var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if(timeUnit == "SECOND"){
                    timeUnit = "MINUTE";
                }

                var tableName = "IS-AUTHENTICATION-STAT-PER-" + timeUnit ;
                var additionalParameters = "";

                if(listnedAdditionalUserPrefs != ""){
                    additionalParameters = listnedAdditionalUserPrefs;
                }


                var overallAuthSuccessCount = 0;
                var overallAuthFailureCount = 0;

                query = stringify({
                    tableName: tableName,
                    groupByField: "facetStartTime",
                    query: "startingTime : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters,
                    aggregateFields: [
                        {
                            fields: ["authSuccessCount"],
                            aggregate: "SUM",
                            alias: "total_authSuccessCount"
                        },
                        {
                            fields: ["authFailiureCount"],
                            aggregate: "SUM",
                            alias: "total_authFailiureCount"
                        }
                    ]
                });
                resp = connector.searchWithAggregates(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());

                for (var i = 0; i < dataPoints.length; i++) {
                    var obj = dataPoints[i];
                    overallAuthSuccessCount += obj.values.total_authSuccessCount;
                    overallAuthFailureCount += obj.values.total_authFailiureCount;

                    result.push({
                        "timestamp": obj.values.facetStartTime[0],
                        "successCount": obj.values.total_authSuccessCount,
                        "faultsCount": obj.values.total_authFailiureCount
                    });
                }
                break;
            }case TYPE_PER_USER_AUTH_SUCCESS:
            {
                result = [];
                dataPointsArray = [];
                var timeFrom = request.getParameter("timeFrom");
                var timeTo = request.getParameter("timeTo");
                var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));


                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if(timeUnit == "SECOND"){
                    timeUnit = "MINUTE";
                }

                var tableName = "IS-USER-AUTHENTICATION-STAT-PER-" + timeUnit;

                var additionalParameters = "";

                if(listnedAdditionalUserPrefs != ""){
                    tableName = "IS-AUTHENTICATION-STAT-PER-" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                query = stringify({
                    fieldName : "userName", //field which is indexed as a FACET
                    categoryPath : [], //Path being drilled down, optional
                    query : "startingTime : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters, //search query, optional
                    scoreFunction : "authSuccessCount",
                    start:start,
                    count:length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);

                var dataPoints = JSON.parse(resp.getMessage());

                var obj = dataPoints.categories;
                var categoryCount = dataPoints.categoryCount;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "username": key,
                            "authSuccessCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }case TYPE_PER_USER_AUTH_FAILURE:
            {
                result = [];
                dataPointsArray = [];
                var timeFrom = request.getParameter("timeFrom");
                var timeTo = request.getParameter("timeTo");
                var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if(timeUnit == "SECOND"){
                    timeUnit = "MINUTE";
                }

                var tableName = "IS-USER-AUTHENTICATION-STAT-PER-" + timeUnit;

                var additionalParameters = "";


                if(listnedAdditionalUserPrefs != ""){
                    tableName = "IS-AUTHENTICATION-STAT-PER-" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                query = stringify({
                    fieldName : "userName", //field which is indexed as a FACET
                    categoryPath : [], //Path being drilled down, optional
                    query : "startingTime : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters, //search query, optional
                    scoreFunction : "authFailiureCount", //score function
                    start:start,
                    count:length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var categoryCount = dataPoints.categoryCount;



                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "username": key,
                            "authFailiureCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }case TYPE_PER_SERVICE_PROVIDER_AUTH_SUCCESS:
            {
                result = [];
                dataPointsArray = [];
                var timeFrom = request.getParameter("timeFrom");
                var timeTo = request.getParameter("timeTo");
                var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));


                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if(timeUnit == "SECOND"){
                    timeUnit = "MINUTE";
                }


                var tableName = "IS-SERVICE-PROVIDER-AUTHENTICATION-STAT-PER-" + timeUnit;

                var additionalParameters = "";

                if(listnedAdditionalUserPrefs != ""){
                    tableName = "IS-AUTHENTICATION-STAT-PER-" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                query = stringify({
                    fieldName : "serviceprovider", //field which is indexed as a FACET
                    categoryPath : [], //Path being drilled down, optional
                    query : "startingTime : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters, //search query, optional
                    scoreFunction : "authSuccessCount", //score function
                    start:start,
                    count:length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var categoryCount = dataPoints.categoryCount;



                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "serviceprovider": key,
                            "authSuccessCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }case TYPE_PER_SERVICE_PROVIDER_AUTH_FAILURE:
                {
                    result = [];
                    dataPointsArray = [];
                    var timeFrom = request.getParameter("timeFrom");
                    var timeTo = request.getParameter("timeTo");
                    var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                    var start = parseInt(request.getParameter("start"));
                    var length = parseInt(request.getParameter("count"));

                    var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                    if(timeUnit == "SECOND"){
                        timeUnit = "MINUTE";
                    }

                    var tableName = "IS-SERVICE-PROVIDER-AUTHENTICATION-STAT-PER-" + timeUnit;

                    var additionalParameters = "";

                    if(listnedAdditionalUserPrefs != ""){
                        tableName = "IS-AUTHENTICATION-STAT-PER-" + timeUnit;
                        additionalParameters = listnedAdditionalUserPrefs;
                    }

                    query = stringify({
                        fieldName : "serviceprovider", //field which is indexed as a FACET
                        categoryPath : [], //Path being drilled down, optional
                        query : "startingTime : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters, //search query, optional
                        scoreFunction : "authFailiureCount", //score function
                        start:start,
                        count:length
                    });

                    resp = connector.drillDownCategories(loggedInUser, tableName, query);
                    var dataPoints = JSON.parse(resp.getMessage());
                    var categoryCount = dataPoints.categoryCount;
                    var obj = dataPoints.categories;

                    for (var key in obj) {
                        if (obj.hasOwnProperty(key)) {
                            dataPointsArray.push({
                                "serviceprovider": key,
                                "authFailiureCount": obj[key]
                            });
                        }
                    }
                    result.push(dataPointsArray);
                    result.push(categoryCount);
                    break;
            }case TYPE_PER_ROLE_AUTH_SUCCESS:
                {
                    result = [];
                    dataPointsArray = [];
                    var timeFrom = request.getParameter("timeFrom");
                    var timeTo = request.getParameter("timeTo");
                    var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                    var start = parseInt(request.getParameter("start"));
                    var length = parseInt(request.getParameter("count"));

                    var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                    if(timeUnit == "SECOND"){
                        timeUnit = "MINUTE";
                    }

                    var tableName = "IS-ROLE-AUTHENTICATION-STAT-PER-" + timeUnit;

                    var additionalParameters = "";

                    if(listnedAdditionalUserPrefs != ""){
                        additionalParameters = listnedAdditionalUserPrefs;
                    }

                    query = stringify({
                        fieldName : "role", //field which is indexed as a FACET
                        categoryPath : [], //Path being drilled down, optional
                        query : "startingTime : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters, //search query, optional
                        scoreFunction : "authSuccessCount", //score function
                        start:start,
                        count:length
                    });

                    resp = connector.drillDownCategories(loggedInUser, tableName, query);
                    var dataPoints = JSON.parse(resp.getMessage());
                    var categoryCount = dataPoints.categoryCount;
                    var obj = dataPoints.categories;

                    for (var key in obj) {
                        if (obj.hasOwnProperty(key)) {
                            dataPointsArray.push({
                                "role": key,
                                "authSuccessCount": obj[key]
                            });
                        }
                    }
                    result.push(dataPointsArray);
                    result.push(categoryCount);
                    break;
            }case TYPE_PER_ROLE_AUTH_FAILURE:
            {
                result = [];
                dataPointsArray = [];
                var timeFrom = request.getParameter("timeFrom");
                var timeTo = request.getParameter("timeTo");
                var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if(timeUnit == "SECOND"){
                    timeUnit = "MINUTE";
                }

                var tableName = "IS-ROLE-AUTHENTICATION-STAT-PER-" + timeUnit;

                var additionalParameters = "";

                if(listnedAdditionalUserPrefs != ""){
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                query = stringify({
                    fieldName : "role", //field which is indexed as a FACET
                    categoryPath : [], //Path being drilled down, optional
                    query : "startingTime : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters, //search query, optional
                    scoreFunction : "authFailiureCount", //score function
                    start:start,
                    count:length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var categoryCount = dataPoints.categoryCount;
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "role": key,
                            "authFailiureCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_PER_IDENTITY_PROVIDER_AUTH_SUCCESS:
            {
                result = [];
                dataPointsArray = [];
                var timeFrom = request.getParameter("timeFrom");
                var timeTo = request.getParameter("timeTo");
                var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if(timeUnit == "SECOND"){
                    timeUnit = "MINUTE";
                }

                var tableName = "IS-IDENTITY-PROVIDER-AUTHENTICATION-STAT-PER-" + timeUnit;

                var additionalParameters = "";

                if(listnedAdditionalUserPrefs != ""){
                    tableName = "IS-AUTHENTICATION-STAT-PER-" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                query = stringify({
                    fieldName : "identityProvider", //field which is indexed as a FACET
                    categoryPath : [], //Path being drilled down, optional
                    query : "startingTime : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters, //search query, optional
                    scoreFunction : "authSuccessCount", //score function
                    start:start,
                    count:length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var categoryCount = dataPoints.categoryCount;
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "identityProvider": key,
                            "authSuccessCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_PER_IDENTITY_PROVIDER_AUTH_FAILURE:
            {
                result = [];
                dataPointsArray = [];
                var timeFrom = request.getParameter("timeFrom");
                var timeTo = request.getParameter("timeTo");
                var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));




                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if(timeUnit == "SECOND"){
                    timeUnit = "MINUTE";
                }


                var tableName = "IS-IDENTITY-PROVIDER-AUTHENTICATION-STAT-PER-" + timeUnit;

                var additionalParameters = "";

                if(listnedAdditionalUserPrefs != ""){
                    tableName = "IS-AUTHENTICATION-STAT-PER-" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                query = stringify({
                    fieldName : "identityProvider", //field which is indexed as a FACET
                    categoryPath : [], //Path being drilled down, optional
                    query : "startingTime : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters, //search query, optional
                    scoreFunction : "authFailiureCount", //score function
                    start:start,
                    count:length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var categoryCount = dataPoints.categoryCount;
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "identityProvider": key,
                            "authFailiureCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_OVERALL_AUTH_STATS:
                {

                    result = [];
                    var timeFrom = request.getParameter("timeFrom");
                    var timeTo = request.getParameter("timeTo");
                    var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                    var timeRanges = timeRangeUtil.getDateTimeRanges(timeFrom, timeTo);

                    var additionalParameters = "";

                    if(listnedAdditionalUserPrefs != ""){
                        additionalParameters = listnedAdditionalUserPrefs;
                    }

                    var searchParams = [];
                    var authSuccessCount = {
                        fields: ["authSuccessCount"],
                        aggregate: "SUM",
                        alias: "sum_auth_successes"
                    };
                    var authFailiureCount = {
                        fields: ["authFailiureCount"],
                        aggregate: "SUM",
                        alias: "sum_auth_failures"
                    };

                    var aggregateFields = [];
                    aggregateFields.push(authSuccessCount);
                    aggregateFields.push(authFailiureCount);

                    for (var i = 0; i < timeRanges.size(); i++) {
                        timeRange = timeRanges.get(i);

                        var timeUnit = timeRange.unit;

                        if(timeUnit == "SECOND"){
                            timeUnit = "MINUTE";
                        }
                        var searchParam = {
                            tableName: "IS-AUTHENTICATION-STAT-PER-" + timeUnit,
                            groupByField: "facetStartTime",
                            query: "startingTime : [" + timeRange.range[0] + " TO " + timeRange.range[1] + "]"+additionalParameters,
                            noOfRecords: 100000
                        };
                        searchParam.aggregateFields = aggregateFields;
                        searchParams.push(searchParam);
                    }
                    resp = connector.searchMultiTablesWithAggregates(loggedInUser, JSON.stringify(searchParams));
                    var totalAuthSuccessCount = 0;
                    var totalAuthFailiureCount = 0;
                    var dataPoints = JSON.parse(resp.getMessage());
                    for (var i = 0; i < dataPoints.length; i++) {
                        var obj = dataPoints[i];
                        for(var z = 0; z < obj.length; z++){
                            totalAuthSuccessCount += obj[z].values.sum_auth_successes;
                            totalAuthFailiureCount += obj[z].values.sum_auth_failures;
                        }

                    }
                    result = {success: totalAuthSuccessCount, failed: totalAuthFailiureCount};
                    break;
                }
            case TYPE_AUTHENTICATION_DATA_TABLE:
            {
                var result = {};
                var data = [];
                var timeFrom = request.getParameter("timeFrom");
                var timeTo = request.getParameter("timeTo");
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("length"));
                var draw = request.getParameter("draw");
                var userQuery = request.getParameter("search[value]");
                var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                var tableName = "IS-UNIQUE-AUTHENTICATION-STATS";

                var additionalParameters = "";

                if(listnedAdditionalUserPrefs != ""){
                    additionalParameters = listnedAdditionalUserPrefs;
                }



                var query = stringify({
                    "query": "timestamp : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters,
                    "start": start,
                    "count": length
                });

                var resp = connector.search(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var count = connector.searchCount(loggedInUser, tableName, query);
                var limit = count.getMessage();

                var columns = ["userName", "serviceprovider", "identityProvider", "rolesCommaSeperated"
                    ,"remoteIp","authenticationSuccess","timestamp"];

                for (i = 0; i < dataPoints.length; i++) {
                    var temp = [];

                    for (j = 0; j < columns.length; j++) {
                        var column = columns[j];
                        if (dataPoints[i] != null) {
                            var value = dataPoints[i]["values"][column];
                            if (column == "timestamp") {
                                var date = new Date(value);
                                temp.push(date.toLocaleString());
                            } else {
                                temp.push(value);
                            }
                        }
                    }
                    data.push(temp);
                }

                result["draw"] = draw;
                result["data"] = data;

                if (dataPoints.length < length) {
                    limit = start + length;
                }
                result["recordsFiltered"] = limit;
                result["recordsTotal"] = limit;
                break;
            }
            case TYPE_USERNAME_LIST:
            {
                result = [];
                dataPointsArray = [];
                var timeFrom = request.getParameter("timeFrom");
                var timeTo = request.getParameter("timeTo");
                var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if(timeUnit == "SECOND"){
                    timeUnit = "MINUTE";
                }

                var tableName = "IS-USER-AUTHENTICATION-STAT-PER-" + timeUnit;

                var additionalParameters = "";

                if(listnedAdditionalUserPrefs != ""){
                    tableName = "IS-AUTHENTICATION-STAT-PER-" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                query = stringify({
                    fieldName : "userName", //field which is indexed as a FACET
                    categoryPath : [], //Path being drilled down, optional
                    query : "startingTime : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters, //search query, optional
                    start:start,
                    count:length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);

                var dataPoints = JSON.parse(resp.getMessage());

                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        result.push({
                            "userName": key
                        });
                    }
                }
                break;
            }
            case TYPE_ROLE_LIST: {
                result = [];
                dataPointsArray = [];
                var timeFrom = request.getParameter("timeFrom");
                var timeTo = request.getParameter("timeTo");
                var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if(timeUnit == "SECOND"){
                    timeUnit = "MINUTE";
                }

                var tableName = "IS-ROLE-AUTHENTICATION-STAT-PER-" + timeUnit;

                var additionalParameters = "";

                if(listnedAdditionalUserPrefs != ""){
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                query = stringify({
                    fieldName : "role", //field which is indexed as a FACET
                    categoryPath : [], //Path being drilled down, optional
                    query : "startingTime : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters, //search query, optional
                    start:start,
                    count:length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());

                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        result.push({
                            "role": key
                        });
                    }
                }
                break;
            }
            case TYPE_IDENTITY_PROVIDER_LIST : {
                result = [];
                dataPointsArray = [];
                var timeFrom = request.getParameter("timeFrom");
                var timeTo = request.getParameter("timeTo");
                var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if(timeUnit == "SECOND"){
                    timeUnit = "MINUTE";
                }

                var tableName = "IS-IDENTITY-PROVIDER-AUTHENTICATION-STAT-PER-" + timeUnit;

                var additionalParameters = "";

                if(listnedAdditionalUserPrefs != ""){
                    tableName = "IS-AUTHENTICATION-STAT-PER-" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                query = stringify({
                    fieldName : "identityProvider", //field which is indexed as a FACET
                    categoryPath : [], //Path being drilled down, optional
                    query : "startingTime : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters, //search query, optional
                    start:start,
                    count:length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        result.push({
                            "identityProvider": key
                        });
                    }
                }
                break;
            }
            case TYPE_SERVICE_PROVIDER_LIST : {
                result = [];
                dataPointsArray = [];
                var timeFrom = request.getParameter("timeFrom");
                var timeTo = request.getParameter("timeTo");
                var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if(timeUnit == "SECOND"){
                    timeUnit = "MINUTE";
                }

                var tableName = "IS-SERVICE-PROVIDER-AUTHENTICATION-STAT-PER-" + timeUnit;

                var additionalParameters = "";

                if(listnedAdditionalUserPrefs != ""){
                    tableName = "IS-AUTHENTICATION-STAT-PER-" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                query = stringify({
                    fieldName : "serviceprovider", //field which is indexed as a FACET
                    categoryPath : [], //Path being drilled down, optional
                    query : "startingTime : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters, //search query, optional
                    start:start,
                    count:length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        result.push({
                            "serviceprovider": key
                        });
                    }
                }
                break;
            }
            case TYPE_PER_SERVICE_PROVIDER_FIRST_LOGIN_SUCCESS :
            {
                result = [];
                dataPointsArray = [];
                var timeFrom = request.getParameter("timeFrom");
                var timeTo = request.getParameter("timeTo");
                var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if (timeUnit == "SECOND") {
                    timeUnit = "MINUTE";
                }


                var tableName = "IS-SERVICE-PROVIDER-AUTHENTICATION-STAT-PER-" + timeUnit;
                var additionalParameters = "";

                if (listnedAdditionalUserPrefs != "") {
                    tableName = "IS-AUTHENTICATION-STAT-PER-" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                query = stringify({
                    fieldName: "serviceprovider", //field which is indexed as a FACET
                    categoryPath: [], //Path being drilled down, optional
                    query: "isFirstLoginCount : true AND startingTime : [" + timeFrom + " TO " + timeTo + "]" + additionalParameters, //search query, optional
                    scoreFunction: "authSuccessCount", //score function
                    start: start,
                    count: length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var categoryCount = dataPoints.categoryCount;
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "serviceprovider": key,
                            "authSuccessCount": obj[key]
                                             });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_USERSTORE_LIST: {
                result = [];
                dataPointsArray = [];
                var timeFrom = request.getParameter("timeFrom");
                var timeTo = request.getParameter("timeTo");
                var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if(timeUnit == "SECOND"){
                    timeUnit = "MINUTE";
                }

                var tableName = "IS-USERSTORE-AUTHENTICATION-STAT-PER-" + timeUnit;

                var additionalParameters = "";

                if(listnedAdditionalUserPrefs != ""){
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                query = stringify({
                    fieldName : "userstore", //field which is indexed as a FACET
                    categoryPath : [], //Path being drilled down, optional
                    query : "startingTime : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters, //search query, optional
                    start:start,
                    count:length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());

                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        result.push({
                            "userstore": key
                        });
                    }
                }
                break;
            }
            case TYPE_PER_USERSTORE_AUTH_SUCCESS:
            {
                result = [];
                dataPointsArray = [];
                var timeFrom = request.getParameter("timeFrom");
                var timeTo = request.getParameter("timeTo");
                var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if(timeUnit == "SECOND"){
                    timeUnit = "MINUTE";
                }

                var tableName = "IS-USERSTORE-AUTHENTICATION-STAT-PER-" + timeUnit;

                var additionalParameters = "";

                if(listnedAdditionalUserPrefs != ""){
                    tableName = "IS-AUTHENTICATION-STAT-PER-" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                query = stringify({
                    fieldName : "userstore", //field which is indexed as a FACET
                    categoryPath : [], //Path being drilled down, optional
                    query : "startingTime : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters, //search query, optional
                    scoreFunction : "authSuccessCount", //score function
                    start:start,
                    count:length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var categoryCount = dataPoints.categoryCount;
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "userstore": key,
                            "authSuccessCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_PER_USERSTORE_AUTH_FAILURE:
            {
                result = [];
                dataPointsArray = [];
                var timeFrom = request.getParameter("timeFrom");
                var timeTo = request.getParameter("timeTo");
                var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("count"));

                var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);

                if(timeUnit == "SECOND"){
                    timeUnit = "MINUTE";
                }

                var tableName = "IS-USERSTORE-AUTHENTICATION-STAT-PER-" + timeUnit;

                var additionalParameters = "";

                if(listnedAdditionalUserPrefs != ""){
                    tableName = "IS-AUTHENTICATION-STAT-PER-" + timeUnit;
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                query = stringify({
                    fieldName : "userstore", //field which is indexed as a FACET
                    categoryPath : [], //Path being drilled down, optional
                    query : "startingTime : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters, //search query, optional
                    scoreFunction : "authFailiureCount", //score function
                    start:start,
                    count:length
                });

                resp = connector.drillDownCategories(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var categoryCount = dataPoints.categoryCount;
                var obj = dataPoints.categories;

                for (var key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        dataPointsArray.push({
                            "userstore": key,
                            "authFailiureCount": obj[key]
                        });
                    }
                }
                result.push(dataPointsArray);
                result.push(categoryCount);
                break;
            }
            case TYPE_AUTHENTICATION_DATA_TABLE_RESIDENT_IDP:
            {
                var result = {};
                var data = [];
                var timeFrom = request.getParameter("timeFrom");
                var timeTo = request.getParameter("timeTo");
                var start = parseInt(request.getParameter("start"));
                var length = parseInt(request.getParameter("length"));
                var draw = request.getParameter("draw");
                var userQuery = request.getParameter("search[value]");
                var listnedAdditionalUserPrefs = request.getParameter("listnedAdditionalUserPrefs");
                var tableName = "IS-UNIQUE-AUTHENTICATION-STATS";

                var additionalParameters = "";
                if(listnedAdditionalUserPrefs != ""){
                    additionalParameters = listnedAdditionalUserPrefs;
                }

                var query = stringify({
                    "query": "timestamp : [" + timeFrom + " TO " + timeTo + "]"+additionalParameters,
                    "start": start,
                    "count": length
                });

                var resp = connector.search(loggedInUser, tableName, query);
                var dataPoints = JSON.parse(resp.getMessage());
                var count = connector.searchCount(loggedInUser, tableName, query);
                var limit = count.getMessage();

                var columns = ["userName", "serviceprovider", "userstore", "rolesCommaSeperated"
                    ,"remoteIp","authenticationSuccess","timestamp"];

                for (i = 0; i < dataPoints.length; i++) {
                    var temp = [];

                    for (j = 0; j < columns.length; j++) {
                        var column = columns[j];
                        if (dataPoints[i] != null) {
                            var value = dataPoints[i]["values"][column];
                            if (column == "timestamp") {
                                var date = new Date(value);
                                temp.push(date.toLocaleString());
                            } else {
                                temp.push(value);
                            }
                        }
                    }
                    data.push(temp);
                }

                result["draw"] = draw;
                result["data"] = data;

                if (dataPoints.length < length) {
                    limit = start + length;
                }
                result["recordsFiltered"] = limit;
                result["recordsTotal"] = limit;
                break;
            }
            default:
            {
                result = '{ "status": "Failed", "message": "Unidentified operation" }';
            }
        }

        if (result != null) {
            if (log.isDebugEnabled()) {
                log.debug("value of result: " + result);
            }
            var finalResult;
            if (type == TYPE_AUTHENTICATION_DATA_TABLE || type == TYPE_AUTHENTICATION_DATA_TABLE_RESIDENT_IDP) {
                finalResult = result;
            }else{
                finalResult = {
                    status: "success",
                    message: result
                }
            }
            print(finalResult);
        }
    }
    else {
        print('{ "status": "Failed", "statusCode": "500", "message": "AnalyticsCachedWebServiceConnector is unavailable" }');
    }

}());

%>